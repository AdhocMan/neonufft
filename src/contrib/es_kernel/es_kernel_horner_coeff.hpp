#pragma once

// Header of static arrays of monomial coeffs of spreading kernel function in
// each fine-grid interval. Generated by gen_all_horner_cpp_header.m in devel/
// Authors: Alex Barnett, Ludvig af Klinteberg, Marco Barbone & Libin Lu.
// (C) 2018--2024 The Simons Foundation, Inc.
#include "neonufft/config.h"
//---

#include "neonufft/memory/array.hpp"
#include "neonufft/types.hpp"

#include <array>

namespace neonufft {

namespace contrib {
template <typename T>
inline constexpr std::size_t padded_array_size(std::size_t size) {
  const auto vec_length = NEONUFFT_MAX_VEC_LENGTH / sizeof(T);
  return size + (vec_length - (size % vec_length));
}

// WIDTH in [2, 16], T is either float or double
template <IntType WIDTH, typename T> struct HornerCoeffs;

template <typename T> struct HornerCoeffs<2, T> {
  inline static constexpr IntType N_SPREAD = 2;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(2)>, 4> values;
};

template <typename T> struct HornerCoeffs<3, T> {
  inline static constexpr IntType N_SPREAD = 3;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(3)>, 6> values;
};

template <typename T> struct HornerCoeffs<4, T> {
  inline static constexpr IntType N_SPREAD = 4;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(4)>, 7> values;
};

template <typename T> struct HornerCoeffs<5, T> {
  inline static constexpr IntType N_SPREAD = 5;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(5)>, 8> values;
};

template <typename T> struct HornerCoeffs<6, T> {
  inline static constexpr IntType N_SPREAD = 6;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(6)>, 9> values;
};

template <typename T> struct HornerCoeffs<7, T> {
  inline static constexpr IntType N_SPREAD = 7;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(7)>, 10> values;
};

template <typename T> struct HornerCoeffs<8, T> {
  inline static constexpr IntType N_SPREAD = 8;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(8)>, 10> values;
};

template <typename T> struct HornerCoeffs<9, T> {
  inline static constexpr IntType N_SPREAD = 9;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(9)>, 11> values;
};

template <typename T> struct HornerCoeffs<10, T> {
  inline static constexpr IntType N_SPREAD = 10;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(10)>, 12> values;
};

template <typename T> struct HornerCoeffs<11, T> {
  inline static constexpr IntType N_SPREAD = 11;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(11)>, 13> values;
};

template <typename T> struct HornerCoeffs<12, T> {
  inline static constexpr IntType N_SPREAD = 12;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(12)>, 14> values;
};

template <typename T> struct HornerCoeffs<13, T> {
  inline static constexpr IntType N_SPREAD = 13;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(13)>, 15> values;
};

template <typename T> struct HornerCoeffs<14, T> {
  inline static constexpr IntType N_SPREAD = 14;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(14)>, 16> values;
};

template <typename T> struct HornerCoeffs<15, T> {
  inline static constexpr IntType N_SPREAD = 15;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(15)>, 17> values;
};

template <typename T> struct HornerCoeffs<16, T> {
  inline static constexpr IntType N_SPREAD = 16;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(16)>, 18> values;
};

extern template struct HornerCoeffs<2, float>;
extern template struct HornerCoeffs<3, float>;
extern template struct HornerCoeffs<4, float>;
extern template struct HornerCoeffs<5, float>;
extern template struct HornerCoeffs<6, float>;
extern template struct HornerCoeffs<7, float>;
extern template struct HornerCoeffs<8, float>;
extern template struct HornerCoeffs<9, float>;
extern template struct HornerCoeffs<10, float>;
extern template struct HornerCoeffs<11, float>;
extern template struct HornerCoeffs<12, float>;
extern template struct HornerCoeffs<13, float>;
extern template struct HornerCoeffs<14, float>;
extern template struct HornerCoeffs<15, float>;
extern template struct HornerCoeffs<16, float>;


extern template struct HornerCoeffs<2, double>;
extern template struct HornerCoeffs<3, double>;
extern template struct HornerCoeffs<4, double>;
extern template struct HornerCoeffs<5, double>;
extern template struct HornerCoeffs<6, double>;
extern template struct HornerCoeffs<7, double>;
extern template struct HornerCoeffs<8, double>;
extern template struct HornerCoeffs<9, double>;
extern template struct HornerCoeffs<10, double>;
extern template struct HornerCoeffs<11, double>;
extern template struct HornerCoeffs<12, double>;
extern template struct HornerCoeffs<13, double>;
extern template struct HornerCoeffs<14, double>;
extern template struct HornerCoeffs<15, double>;
extern template struct HornerCoeffs<16, double>;

} // namespace contrib
} // namespace neonufft
