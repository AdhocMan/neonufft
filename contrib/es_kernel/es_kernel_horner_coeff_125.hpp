#pragma once

// Header of static arrays of monomial coeffs of spreading kernel function in
// each fine-grid interval. Generated by gen_all_horner_cpp_header.m in devel/
// Authors: Alex Barnett, Ludvig af Klinteberg, Marco Barbone & Libin Lu.
// (C) 2018--2024 The Simons Foundation, Inc.
#include "neonufft/config.h"

#include "es_kernel/es_kernel_horner_coeff.hpp"
#include "memory/view.hpp"
#include "neonufft/types.hpp"

namespace neonufft {

namespace contrib {

template <IntType WIDTH, typename T> struct HornerCoeffs125;

template <typename T> struct HornerCoeffs125<2, T> {
  inline static constexpr IntType N_SPREAD = 2;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(2)>, 4> values;
};

template <typename T> struct HornerCoeffs125<3, T> {
  inline static constexpr IntType N_SPREAD = 3;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(3)>, 5> values;
};

template <typename T> struct HornerCoeffs125<4, T> {
  inline static constexpr IntType N_SPREAD = 4;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(4)>, 6> values;
};

template <typename T> struct HornerCoeffs125<5, T> {
  inline static constexpr IntType N_SPREAD = 5;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(5)>, 6> values;
};

template <typename T> struct HornerCoeffs125<6, T> {
  inline static constexpr IntType N_SPREAD = 6;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(6)>, 7> values;
};

template <typename T> struct HornerCoeffs125<7, T> {
  inline static constexpr IntType N_SPREAD = 7;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(7)>, 8> values;
};

template <typename T> struct HornerCoeffs125<8, T> {
  inline static constexpr IntType N_SPREAD = 8;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(8)>, 8> values;
};

template <typename T> struct HornerCoeffs125<9, T> {
  inline static constexpr IntType N_SPREAD = 9;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(9)>, 9> values;
};

template <typename T> struct HornerCoeffs125<10, T> {
  inline static constexpr IntType N_SPREAD = 10;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(10)>, 10> values;
};

template <typename T> struct HornerCoeffs125<11, T> {
  inline static constexpr IntType N_SPREAD = 11;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(11)>, 10> values;
};

template <typename T> struct HornerCoeffs125<12, T> {
  inline static constexpr IntType N_SPREAD = 12;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(12)>, 11> values;
};

template <typename T> struct HornerCoeffs125<13, T> {
  inline static constexpr IntType N_SPREAD = 13;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(13)>, 12> values;
};

template <typename T> struct HornerCoeffs125<14, T> {
  inline static constexpr IntType N_SPREAD = 14;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(14)>, 13> values;
};

template <typename T> struct HornerCoeffs125<15, T> {
  inline static constexpr IntType N_SPREAD = 15;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(15)>, 13> values;
};

template <typename T> struct HornerCoeffs125<16, T> {
  inline static constexpr IntType N_SPREAD = 16;
  alignas(NEONUFFT_MAX_VEC_LENGTH) static std::array<
      std::array<T, padded_array_size<T>(16)>, 14> values;
};

extern template struct HornerCoeffs125<2, float>;
extern template struct HornerCoeffs125<3, float>;
extern template struct HornerCoeffs125<4, float>;
extern template struct HornerCoeffs125<5, float>;
extern template struct HornerCoeffs125<6, float>;
extern template struct HornerCoeffs125<7, float>;
extern template struct HornerCoeffs125<8, float>;
extern template struct HornerCoeffs125<9, float>;
extern template struct HornerCoeffs125<10, float>;
extern template struct HornerCoeffs125<11, float>;
extern template struct HornerCoeffs125<12, float>;
extern template struct HornerCoeffs125<13, float>;
extern template struct HornerCoeffs125<14, float>;
extern template struct HornerCoeffs125<15, float>;
extern template struct HornerCoeffs125<16, float>;


extern template struct HornerCoeffs125<2, double>;
extern template struct HornerCoeffs125<3, double>;
extern template struct HornerCoeffs125<4, double>;
extern template struct HornerCoeffs125<5, double>;
extern template struct HornerCoeffs125<6, double>;
extern template struct HornerCoeffs125<7, double>;
extern template struct HornerCoeffs125<8, double>;
extern template struct HornerCoeffs125<9, double>;
extern template struct HornerCoeffs125<10, double>;
extern template struct HornerCoeffs125<11, double>;
extern template struct HornerCoeffs125<12, double>;
extern template struct HornerCoeffs125<13, double>;
extern template struct HornerCoeffs125<14, double>;
extern template struct HornerCoeffs125<15, double>;
extern template struct HornerCoeffs125<16, double>;

} // namespace contrib
} // namespace neonufft
